{"id":"xlCh","dependencies":[{"name":"/home/telefonica/Documentos/maps_lau/healthy_places/simple_map/package.json","includedInParent":true,"mtime":1597614680550},{"name":"/home/telefonica/Documentos/maps_lau/healthy_places/simple_map/node_modules/ol/package.json","includedInParent":true,"mtime":1597614166508},{"name":"../color.js","loc":{"line":5,"column":39},"parent":"/home/telefonica/Documentos/maps_lau/healthy_places/simple_map/node_modules/ol/style/expressions.js","resolved":"/home/telefonica/Documentos/maps_lau/healthy_places/simple_map/node_modules/ol/color.js"}],"generated":{"js":"var $xlCh$exports={};$parcel$require(\"xlCh\",\"../color.js\");var $xlCh$export$ValueTypes={NUMBER:1,STRING:2,COLOR:4,BOOLEAN:8,NUMBER_ARRAY:16,ANY:31,NONE:0};$xlCh$exports.ValueTypes=$xlCh$export$ValueTypes;var $xlCh$export$Operators={};function $xlCh$export$getValueType(e){if(\"number\"==typeof e)return $xlCh$export$ValueTypes.NUMBER;if(\"boolean\"==typeof e)return $xlCh$export$ValueTypes.BOOLEAN;if(\"string\"==typeof e)return $xlCh$import$isStringColor(e)?$xlCh$export$ValueTypes.COLOR|$xlCh$export$ValueTypes.STRING:$xlCh$export$ValueTypes.STRING;if(!Array.isArray(e))throw new Error(\"Unhandled value type: \"+JSON.stringify(e));var r=e;if(r.every(function(e){return\"number\"==typeof e}))return 3===r.length||4===r.length?$xlCh$export$ValueTypes.COLOR|$xlCh$export$ValueTypes.NUMBER_ARRAY:$xlCh$export$ValueTypes.NUMBER_ARRAY;if(\"string\"!=typeof r[0])throw new Error(\"Expected an expression operator but received: \"+JSON.stringify(r));var t=$xlCh$export$Operators[r[0]];if(void 0===t)throw new Error(\"Unrecognized expression operator: \"+JSON.stringify(r));return t.getReturnType(r.slice(1))}function $xlCh$export$isTypeUnique(e){return Math.log2(e)%1==0}function $xlCh$export$numberToGlsl(e){var r=e.toString();return-1===r.indexOf(\".\")?r+\".0\":r}function $xlCh$export$arrayToGlsl(e){if(e.length<2||e.length>4)throw new Error(\"`formatArray` can only output `vec2`, `vec3` or `vec4` arrays.\");return\"vec\"+e.length+\"(\"+e.map($xlCh$export$numberToGlsl).join(\", \")+\")\"}function $xlCh$export$colorToGlsl(e){var r=$xlCh$import$asArray(e).slice();return r.length<4&&r.push(1),$xlCh$export$arrayToGlsl(r.map(function(e,r){return r<3?e/255:e}))}function $xlCh$export$getStringNumberEquivalent(e,r){return void 0===e.stringLiteralsMap[r]&&(e.stringLiteralsMap[r]=Object.keys(e.stringLiteralsMap).length),e.stringLiteralsMap[r]}function $xlCh$export$stringToGlsl(e,r){return $xlCh$export$numberToGlsl($xlCh$export$getStringNumberEquivalent(e,r))}function $xlCh$export$expressionToGlsl(e,r,t){if(Array.isArray(r)&&\"string\"==typeof r[0]){var $=$xlCh$export$Operators[r[0]];if(void 0===$)throw new Error(\"Unrecognized expression operator: \"+JSON.stringify(r));return $.toGlsl(e,r.slice(1),t)}return($xlCh$export$getValueType(r)&$xlCh$export$ValueTypes.NUMBER)>0?$xlCh$export$numberToGlsl(r):($xlCh$export$getValueType(r)&$xlCh$export$ValueTypes.BOOLEAN)>0?r.toString():($xlCh$export$getValueType(r)&$xlCh$export$ValueTypes.STRING)>0&&(void 0===t||t==$xlCh$export$ValueTypes.STRING)?$xlCh$export$stringToGlsl(e,r.toString()):($xlCh$export$getValueType(r)&$xlCh$export$ValueTypes.COLOR)>0&&(void 0===t||t==$xlCh$export$ValueTypes.COLOR)?$xlCh$export$colorToGlsl(r):($xlCh$export$getValueType(r)&$xlCh$export$ValueTypes.NUMBER_ARRAY)>0?$xlCh$export$arrayToGlsl(r):void 0}function $xlCh$var$assertNumber(e){if(!($xlCh$export$getValueType(e)&$xlCh$export$ValueTypes.NUMBER))throw new Error(\"A numeric value was expected, got \"+JSON.stringify(e)+\" instead\")}function $xlCh$var$assertNumbers(e){for(var r=0;r<e.length;r++)$xlCh$var$assertNumber(e[r])}function $xlCh$var$assertString(e){if(!($xlCh$export$getValueType(e)&$xlCh$export$ValueTypes.STRING))throw new Error(\"A string value was expected, got \"+JSON.stringify(e)+\" instead\")}function $xlCh$var$assertBoolean(e){if(!($xlCh$export$getValueType(e)&$xlCh$export$ValueTypes.BOOLEAN))throw new Error(\"A boolean value was expected, got \"+JSON.stringify(e)+\" instead\")}function $xlCh$var$assertArgsCount(e,r){if(e.length!==r)throw new Error(\"Exactly \"+r+\" arguments were expected, got \"+e.length+\" instead\")}function $xlCh$var$assertArgsMinCount(e,r){if(e.length<r)throw new Error(\"At least \"+r+\" arguments were expected, got \"+e.length+\" instead\")}function $xlCh$var$assertArgsMaxCount(e,r){if(e.length>r)throw new Error(\"At most \"+r+\" arguments were expected, got \"+e.length+\" instead\")}function $xlCh$var$assertArgsEven(e){if(e.length%2!=0)throw new Error(\"An even amount of arguments was expected, got \"+e+\" instead\")}function $xlCh$var$assertArgsOdd(e){if(e.length%2==0)throw new Error(\"An even amount of arguments was expected, got \"+e+\" instead\")}function $xlCh$var$assertUniqueInferredType(e,r){if(!$xlCh$export$isTypeUnique(r))throw new Error(\"Could not infer only one type from the following expression: \"+JSON.stringify(e))}function $xlCh$var$getEqualOperator(e){return{getReturnType:function(e){return $xlCh$export$ValueTypes.BOOLEAN},toGlsl:function(r,t){$xlCh$var$assertArgsCount(t,2);for(var $=$xlCh$export$ValueTypes.ANY,o=0;o<t.length;o++)$&=$xlCh$export$getValueType(t[o]);if(0===$)throw new Error(\"All arguments should be of compatible type, got \"+JSON.stringify(t)+\" instead\");return\"(\"+$xlCh$export$expressionToGlsl(r,t[0],$)+\" \"+e+\" \"+$xlCh$export$expressionToGlsl(r,t[1],$)+\")\"}}}function $xlCh$var$getDecisionOperator(e){return{getReturnType:function(e){return $xlCh$export$ValueTypes.BOOLEAN},toGlsl:function(r,t){$xlCh$var$assertArgsMinCount(t,2);for(var $=0;$<t.length;$++)$xlCh$var$assertBoolean(t[$]);return\"(\"+t.map(function(e){return $xlCh$export$expressionToGlsl(r,e)}).join(\" \"+e+\" \")+\")\"}}}$xlCh$exports.Operators=$xlCh$export$Operators,$xlCh$exports.getValueType=$xlCh$export$getValueType,$xlCh$exports.isTypeUnique=$xlCh$export$isTypeUnique,$xlCh$exports.numberToGlsl=$xlCh$export$numberToGlsl,$xlCh$exports.arrayToGlsl=$xlCh$export$arrayToGlsl,$xlCh$exports.colorToGlsl=$xlCh$export$colorToGlsl,$xlCh$exports.getStringNumberEquivalent=$xlCh$export$getStringNumberEquivalent,$xlCh$exports.stringToGlsl=$xlCh$export$stringToGlsl,$xlCh$exports.expressionToGlsl=$xlCh$export$expressionToGlsl,$xlCh$export$Operators.get={getReturnType:function(e){return $xlCh$export$ValueTypes.ANY},toGlsl:function(e,r){$xlCh$var$assertArgsCount(r,1),$xlCh$var$assertString(r[0]);var t=r[0].toString();return-1===e.attributes.indexOf(t)&&e.attributes.push(t),(e.inFragmentShader?\"v_\":\"a_\")+t}},$xlCh$export$Operators.var={getReturnType:function(e){return $xlCh$export$ValueTypes.ANY},toGlsl:function(e,r){$xlCh$var$assertArgsCount(r,1),$xlCh$var$assertString(r[0]);var t=r[0].toString();return-1===e.variables.indexOf(t)&&e.variables.push(t),\"u_\"+t}},$xlCh$export$Operators.time={getReturnType:function(e){return $xlCh$export$ValueTypes.NUMBER},toGlsl:function(e,r){return $xlCh$var$assertArgsCount(r,0),\"u_time\"}},$xlCh$export$Operators.zoom={getReturnType:function(e){return $xlCh$export$ValueTypes.NUMBER},toGlsl:function(e,r){return $xlCh$var$assertArgsCount(r,0),\"u_zoom\"}},$xlCh$export$Operators.resolution={getReturnType:function(e){return $xlCh$export$ValueTypes.NUMBER},toGlsl:function(e,r){return $xlCh$var$assertArgsCount(r,0),\"u_resolution\"}},$xlCh$export$Operators[\"*\"]={getReturnType:function(e){return $xlCh$export$ValueTypes.NUMBER},toGlsl:function(e,r){return $xlCh$var$assertArgsCount(r,2),$xlCh$var$assertNumbers(r),\"(\"+$xlCh$export$expressionToGlsl(e,r[0])+\" * \"+$xlCh$export$expressionToGlsl(e,r[1])+\")\"}},$xlCh$export$Operators[\"/\"]={getReturnType:function(e){return $xlCh$export$ValueTypes.NUMBER},toGlsl:function(e,r){return $xlCh$var$assertArgsCount(r,2),$xlCh$var$assertNumbers(r),\"(\"+$xlCh$export$expressionToGlsl(e,r[0])+\" / \"+$xlCh$export$expressionToGlsl(e,r[1])+\")\"}},$xlCh$export$Operators[\"+\"]={getReturnType:function(e){return $xlCh$export$ValueTypes.NUMBER},toGlsl:function(e,r){return $xlCh$var$assertArgsCount(r,2),$xlCh$var$assertNumbers(r),\"(\"+$xlCh$export$expressionToGlsl(e,r[0])+\" + \"+$xlCh$export$expressionToGlsl(e,r[1])+\")\"}},$xlCh$export$Operators[\"-\"]={getReturnType:function(e){return $xlCh$export$ValueTypes.NUMBER},toGlsl:function(e,r){return $xlCh$var$assertArgsCount(r,2),$xlCh$var$assertNumbers(r),\"(\"+$xlCh$export$expressionToGlsl(e,r[0])+\" - \"+$xlCh$export$expressionToGlsl(e,r[1])+\")\"}},$xlCh$export$Operators.clamp={getReturnType:function(e){return $xlCh$export$ValueTypes.NUMBER},toGlsl:function(e,r){$xlCh$var$assertArgsCount(r,3),$xlCh$var$assertNumbers(r);var t=$xlCh$export$expressionToGlsl(e,r[1]),$=$xlCh$export$expressionToGlsl(e,r[2]);return\"clamp(\"+$xlCh$export$expressionToGlsl(e,r[0])+\", \"+t+\", \"+$+\")\"}},$xlCh$export$Operators[\"%\"]={getReturnType:function(e){return $xlCh$export$ValueTypes.NUMBER},toGlsl:function(e,r){return $xlCh$var$assertArgsCount(r,2),$xlCh$var$assertNumbers(r),\"mod(\"+$xlCh$export$expressionToGlsl(e,r[0])+\", \"+$xlCh$export$expressionToGlsl(e,r[1])+\")\"}},$xlCh$export$Operators[\"^\"]={getReturnType:function(e){return $xlCh$export$ValueTypes.NUMBER},toGlsl:function(e,r){return $xlCh$var$assertArgsCount(r,2),$xlCh$var$assertNumbers(r),\"pow(\"+$xlCh$export$expressionToGlsl(e,r[0])+\", \"+$xlCh$export$expressionToGlsl(e,r[1])+\")\"}},$xlCh$export$Operators[\">\"]={getReturnType:function(e){return $xlCh$export$ValueTypes.BOOLEAN},toGlsl:function(e,r){return $xlCh$var$assertArgsCount(r,2),$xlCh$var$assertNumbers(r),\"(\"+$xlCh$export$expressionToGlsl(e,r[0])+\" > \"+$xlCh$export$expressionToGlsl(e,r[1])+\")\"}},$xlCh$export$Operators[\">=\"]={getReturnType:function(e){return $xlCh$export$ValueTypes.BOOLEAN},toGlsl:function(e,r){return $xlCh$var$assertArgsCount(r,2),$xlCh$var$assertNumbers(r),\"(\"+$xlCh$export$expressionToGlsl(e,r[0])+\" >= \"+$xlCh$export$expressionToGlsl(e,r[1])+\")\"}},$xlCh$export$Operators[\"<\"]={getReturnType:function(e){return $xlCh$export$ValueTypes.BOOLEAN},toGlsl:function(e,r){return $xlCh$var$assertArgsCount(r,2),$xlCh$var$assertNumbers(r),\"(\"+$xlCh$export$expressionToGlsl(e,r[0])+\" < \"+$xlCh$export$expressionToGlsl(e,r[1])+\")\"}},$xlCh$export$Operators[\"<=\"]={getReturnType:function(e){return $xlCh$export$ValueTypes.BOOLEAN},toGlsl:function(e,r){return $xlCh$var$assertArgsCount(r,2),$xlCh$var$assertNumbers(r),\"(\"+$xlCh$export$expressionToGlsl(e,r[0])+\" <= \"+$xlCh$export$expressionToGlsl(e,r[1])+\")\"}},$xlCh$export$Operators[\"==\"]=$xlCh$var$getEqualOperator(\"==\"),$xlCh$export$Operators[\"!=\"]=$xlCh$var$getEqualOperator(\"!=\"),$xlCh$export$Operators[\"!\"]={getReturnType:function(e){return $xlCh$export$ValueTypes.BOOLEAN},toGlsl:function(e,r){return $xlCh$var$assertArgsCount(r,1),$xlCh$var$assertBoolean(r[0]),\"(!\"+$xlCh$export$expressionToGlsl(e,r[0])+\")\"}},$xlCh$export$Operators.all=$xlCh$var$getDecisionOperator(\"&&\"),$xlCh$export$Operators.any=$xlCh$var$getDecisionOperator(\"||\"),$xlCh$export$Operators.between={getReturnType:function(e){return $xlCh$export$ValueTypes.BOOLEAN},toGlsl:function(e,r){$xlCh$var$assertArgsCount(r,3),$xlCh$var$assertNumbers(r);var t=$xlCh$export$expressionToGlsl(e,r[1]),$=$xlCh$export$expressionToGlsl(e,r[2]),o=$xlCh$export$expressionToGlsl(e,r[0]);return\"(\"+o+\" >= \"+t+\" && \"+o+\" <= \"+$+\")\"}},$xlCh$export$Operators.array={getReturnType:function(e){return $xlCh$export$ValueTypes.NUMBER_ARRAY},toGlsl:function(e,r){$xlCh$var$assertArgsMinCount(r,2),$xlCh$var$assertArgsMaxCount(r,4),$xlCh$var$assertNumbers(r);var t=r.map(function(r){return $xlCh$export$expressionToGlsl(e,r,$xlCh$export$ValueTypes.NUMBER)});return\"vec\"+r.length+\"(\"+t.join(\", \")+\")\"}},$xlCh$export$Operators.color={getReturnType:function(e){return $xlCh$export$ValueTypes.COLOR},toGlsl:function(e,r){$xlCh$var$assertArgsMinCount(r,3),$xlCh$var$assertArgsMaxCount(r,4),$xlCh$var$assertNumbers(r);var t=r;3===r.length&&t.push(1);var $=r.map(function(r,t){return $xlCh$export$expressionToGlsl(e,r,$xlCh$export$ValueTypes.NUMBER)+(t<3?\" / 255.0\":\"\")});return\"vec\"+r.length+\"(\"+$.join(\", \")+\")\"}},$xlCh$export$Operators.interpolate={getReturnType:function(e){for(var r=$xlCh$export$ValueTypes.COLOR|$xlCh$export$ValueTypes.NUMBER,t=3;t<e.length;t+=2)r&=$xlCh$export$getValueType(e[t]);return r},toGlsl:function(e,r,t){$xlCh$var$assertArgsEven(r),$xlCh$var$assertArgsMinCount(r,6);var $,o=r[0];switch(o[0]){case\"linear\":$=1;break;case\"exponential\":$=o[1];break;default:$=null}if(!$)throw new Error('Invalid interpolation type for \"interpolate\" operator, received: '+JSON.stringify(o));var l=void 0!==t?t:$xlCh$export$ValueTypes.ANY,s=$xlCh$export$Operators.interpolate.getReturnType(r)&l;$xlCh$var$assertUniqueInferredType(r,s);for(var n=$xlCh$export$expressionToGlsl(e,r[1]),x=null,p=2;p<r.length-2;p+=2){var a=$xlCh$export$expressionToGlsl(e,r[p]),u=$xlCh$export$expressionToGlsl(e,r[p+1],s),h=$xlCh$export$expressionToGlsl(e,r[p+2]);x=\"mix(\"+(x||u)+\", \"+$xlCh$export$expressionToGlsl(e,r[p+3],s)+\", pow(clamp((\"+n+\" - \"+a+\") / (\"+h+\" - \"+a+\"), 0.0, 1.0), \"+$xlCh$export$numberToGlsl($)+\"))\"}return x}},$xlCh$export$Operators.match={getReturnType:function(e){for(var r=$xlCh$export$ValueTypes.ANY,t=2;t<e.length;t+=2)r&=$xlCh$export$getValueType(e[t]);return r&=$xlCh$export$getValueType(e[e.length-1])},toGlsl:function(e,r,t){$xlCh$var$assertArgsEven(r),$xlCh$var$assertArgsMinCount(r,4);var $=void 0!==t?t:$xlCh$export$ValueTypes.ANY,o=$xlCh$export$Operators.match.getReturnType(r)&$;$xlCh$var$assertUniqueInferredType(r,o);for(var l=$xlCh$export$expressionToGlsl(e,r[0]),s=$xlCh$export$expressionToGlsl(e,r[r.length-1],o),n=null,x=r.length-3;x>=1;x-=2){n=\"(\"+l+\" == \"+$xlCh$export$expressionToGlsl(e,r[x])+\" ? \"+$xlCh$export$expressionToGlsl(e,r[x+1],o)+\" : \"+(n||s)+\")\"}return n}},$xlCh$export$Operators.case={getReturnType:function(e){for(var r=$xlCh$export$ValueTypes.ANY,t=1;t<e.length;t+=2)r&=$xlCh$export$getValueType(e[t]);return r&=$xlCh$export$getValueType(e[e.length-1])},toGlsl:function(e,r,t){$xlCh$var$assertArgsOdd(r),$xlCh$var$assertArgsMinCount(r,3);var $=void 0!==t?t:$xlCh$export$ValueTypes.ANY,o=$xlCh$export$Operators.case.getReturnType(r)&$;$xlCh$var$assertUniqueInferredType(r,o);for(var l=0;l<r.length-1;l+=2)$xlCh$var$assertBoolean(r[l]);var s=$xlCh$export$expressionToGlsl(e,r[r.length-1],o),n=null;for(l=r.length-3;l>=0;l-=2){n=\"(\"+$xlCh$export$expressionToGlsl(e,r[l])+\" ? \"+$xlCh$export$expressionToGlsl(e,r[l+1],o)+\" : \"+(n||s)+\")\"}return n}};"},"sourceMaps":null,"error":null,"hash":"4d458127fdea645e36ee1a30065822f8","cacheData":{"env":{},"imports":{"$xlCh$import$asArray":["../color.js","asArray"],"$xlCh$import$isStringColor":["../color.js","isStringColor"]},"exports":{"ValueTypes":"$xlCh$export$ValueTypes","Operators":"$xlCh$export$Operators","getValueType":"$xlCh$export$getValueType","isTypeUnique":"$xlCh$export$isTypeUnique","numberToGlsl":"$xlCh$export$numberToGlsl","arrayToGlsl":"$xlCh$export$arrayToGlsl","colorToGlsl":"$xlCh$export$colorToGlsl","getStringNumberEquivalent":"$xlCh$export$getStringNumberEquivalent","stringToGlsl":"$xlCh$export$stringToGlsl","expressionToGlsl":"$xlCh$export$expressionToGlsl"},"wildcards":[],"sideEffects":false,"isES6Module":true}}